;;; Copyright (c) 2017 Gregor Klinke
;;; All rights reserved.

(use 'admon)
(use 'bibref)
(use 'book-contents)
(use 'book-index)
(use 'book-title)
(use 'common)
(use 'example)
(use 'inline)
(use 'para)


;; ------------------------------------------------------------------------------

(define page-style
  (style
      page-width: 165mm ;; 210mm
      page-height: 240mm ;; 297mm
      top-margin: 20mm ;; 20mm
      bottom-margin: 30mm ;; 30mm
      header-margin: 12mm ;; 10mm
      footer-margin: 20mm ;; 10mm
      left-margin: 10mm ;; 20mm
      right-margin: 10mm ;; 20mm
      ))


;; ------------------------------------------------------------------------------

(element book
  (cond
   ((html-backend?) (book-html (current-node)))
   ((tex-backend?) (book-tex (current-node)))))


(define (book-html node)
  (let* ((titlepage (select-elements (children node) 'titlepage))
         (titlepage-titles (select-elements (children titlepage) 'title))
         (title-first (if (> (node-list-length titlepage-titles) 0)
                          (attribute "value" (node-list-first titlepage-titles))
                          (node-list)))
         )

     (case %style%
       ((modern classic) (sosofo-append
                          ;; title, copyright
                          (format-book-front-matter node)
                          (make scroll-sequence
                            font-size: 10pt
                            line-spacing: 12pt
                            start-margin: 45mm
                            end-margin: 0mm
                            width: 600px
                            (process-node-list (children node)))))
       )))


(define (book-tex node)
  (let* ((titlepage (select-elements (children node) 'titlepage))
         (titlepage-titles (select-elements (children titlepage) 'title))
         (title-first (if (> (node-list-length titlepage-titles) 0)
                          (attribute "value" (node-list-first titlepage-titles))
                          (node-list)))
         )
    (make simple-page-sequence
      use: page-style

      font-size: 10pt
      line-spacing: 12pt

      start-margin: 45mm
      end-margin: 0mm

      right-header: (make line-field
                      font-size: 9pt
                      (make page-number (empty-sosofo)))
      left-header: (make line-field
                     font-size: 9pt
                     (process-node-list title-first))

      (process-node-list (children node)))
    ))


;; ------------------------------------------------------------------------------

(define (section-layout gi)
  (case gi
   ;;               #font-size line-spacing weight posture before after number-style
   ((part)          (vector 16pt 19.5pt 'bold  'upright 16pt 8pt "I"))
   ((chapter)       (vector 14pt 16.5pt 'bold  'upright 14pt 7pt "1"))
   ((section)       (vector 12pt 14pt   'bold  'upright 14pt 7pt "1"))
   ((subsection)    (vector 10pt 12pt   'bold  'upright 14pt 7pt "1"))
   ((subsubsection) (vector 10pt 12pt   'bold  'italic  14pt 7pt "1"))
   ((appendix)      (vector 14pt 16.5pt 'bold  'upright 14pt 7pt "A"))
   ((index)         (vector 14pt 16.5pt 'bold  'upright 14pt 7pt #f))
   ((preface)       (vector 14pt 16.5pt 'bold  'upright 14pt 7pt #f))
   ((introduction)  (vector 14pt 16.5pt 'bold  'upright 14pt 7pt #f))
   ((content)       (vector 14pt 16.5pt 'bold  'upright 14pt 7pt #f))
   ((synopsis)      (vector 14pt 16.5pt 'bold  'upright 14pt 7pt #f))
   ((seealso)       (vector 14pt 16.5pt 'bold  'upright 14pt 7pt #f))
   ))

(define (div-number nd num-format)
  (let ((idx (+ (node-list-length (select-elements (preced nd) (gi nd)))
                1)))
    (format-number idx num-format)))


(define (any-section? nd)
  (case (gi nd)
    ((part chapter section subsection subsubsection appendix index
           preface introduction content synopsis seealso) #t)
    (else #f)))


(define (section-title-number-tokens nd)
  (let loop ((p nd)
             (numbers (list)))
    (if (not (any-section? p))
        (reverse numbers)
        (let* ((layout (section-layout (gi p)))
               (num-format (vector-ref layout 6)))
          (loop (parent p)
                (if num-format
                    (append numbers (list (div-number p num-format)))
                    numbers))) )))


(define (section-title-number nd)
  (string-join (section-title-number-tokens nd) "."))


(define (section-title-sosofo title nd)
  (let ((node-title (attribute "title" nd)))
    (if (= (node-list-length node-title) 0)
        (if title (literal title) (literal ""))
        (process-node-list node-title))))

(define (non-p? nd)
  (case (gi nd)
    ((part admon itemize enumerate) #t)
    (else #f)))


(define (format-section title nd)
  (let* ((layout (section-layout (gi nd)))
         (title-num-sosofo (literal (section-title-number nd)))
         (title-sosofo (section-title-sosofo title nd))
         )
    (sosofo-append
     (make anchor
       id: (id nd))
     (make paragraph
       font-size: (vector-ref layout 0)
       line-spacing: (vector-ref layout 1)
       space-before: (vector-ref layout 4)
       space-after:  (vector-ref layout 5)
       font-weight:  (vector-ref layout 2)
       font-posture: (vector-ref layout 3)

       keep-with-next?: #t
       first-line-start-indent: -45mm
       start-indent: 0pt
       quadding: 'left

       (sosofo-append
        (make line-field
          field-width: 41mm
          field-align: 'right
          title-num-sosofo)
        (make line-field
          field-width: 4mm
          (empty-sosofo))
        title-sosofo))

     (let ((nl (children nd)))
       (if (or (node-list-empty? nl)
               (any-section? (node-list-first nl))
               (not (eqv? (gi (node-list-first nl)) 'p)))
           (process-node-list-left-trim-idx-ws nl)
           (sosofo-append
            (make paragraph
              quadding: 'justify
              first-line-start-indent: 0pt
              (process-node-list-left-trim-idx-ws (children (node-list-first nl))))
            (process-node-list-left-trim-idx-ws (node-list-rest nl)))
           ))
     )))

(define %chapters-on-separate-pages% #f)
(element chapter
  (make display-group
    break-before?: (if %chapters-on-separate-pages% 'page #f)
    (format-section "Chapter" (current-node))))

(element introduction
  (make display-group
    break-before?: (if %chapters-on-separate-pages% 'page #f)
    (format-section "Introduction" (current-node))))

(element preface
  (make display-group
    break-before?: (if %chapters-on-separate-pages% 'page #f)
    (format-section "Preface" (current-node))))

(element section
  (format-section "Section" (current-node)))

(element subsection
  (format-section #f (current-node)))

(element subsubsection
  (format-section #f (current-node)))

(element paragraph
  (format-section #f (current-node)))

(element appendix
  (make display-group
    break-before?: (if %chapters-on-separate-pages% 'page #f)
    (format-section "Appendix" (current-node))))

(element content
  (make display-group
    break-before?: 'page
    break-after?: 'page
    (format-section "Contents" (current-node))))

(element index
  (make display-group
    break-before?: 'page
    (format-section "Index" (current-node))))

;; part
;; tome


;; ------------------------------------------------------------------------------

(mode decl-mode
  (element prm
    (make sequence
      font-posture: 'oblique
      font-weight: 'medium
      (process-node-list (attribute "text" (current-node)))))

  (element var
    (make sequence
      font-posture: 'oblique
      font-weight: 'medium
      (process-node-list (attribute "text" (current-node)))))

  (element ?
    (sosofo-append
     (make sequence
       font-weight: 'medium
       (literal "["))
     (process-node-list (attribute "optionalexpr" (current-node)))
     (make sequence
       font-weight: 'medium
       (literal "]"))))

  (element p
    (make paragraph
      space-before: 0pt
      space-after:  0pt
      start-indent: (example-start-indent (parent (current-node)))
      font-name:    "monospace"
      font-size:    9pt
      font-weight:  'bold
      line-spacing: 11pt
      lines:        'asis
      whitespace-treatment: 'preserve
      (process-children)))
  )

(define (make-def-sosofo nd head-sosofo kind)
  (sosofo-append
   (make paragraph
     space-before: 7pt
     first-line-start-indent: -45mm
     start-indent: 0mm
     keep-with-next?: #t
     (sosofo-append
      (make line-field
        field-width: 41mm
        field-align: 'right
        font-posture: 'italic
        (if (sosofo? kind) kind (process-node-list kind)))
      (make line-field
        field-width: 4mm
        (empty-sosofo))
      (with-mode decl-mode
        (make line-field
          font-name: "monospace"
          font-weight: 'bold
          (process-node-list head-sosofo)) )))
   (make display-group
     space-after: 7pt
     (process-node-list (children nd)))))

(element deffn
  (make-def-sosofo (current-node) (attribute "declln" (current-node))
                   (literal "Function")))

(element decl
  (make display-group
    space-before: 7pt
    space-after:  7pt
    (with-mode decl-mode
      (process-children))))

(element def
  (make-def-sosofo (current-node)
                   (attribute "declsum" (current-node))
                   (attribute "kind" (current-node))))


;; ------------------------------------------------------------------------------
;;  metainfo support

(element author
  (let ((email (attribute "email" (current-node))))
    (make paragraph
      first-line-start-indent: 0pt
      quadding: "left"
      (sosofo-append
       (process-node-list (attribute "name" (current-node)))
       (if (not (node-list-empty? email))
           (sosofo-append
            (literal " <")
            (process-node-list email)
            (literal ">"))))
      )))


;; #-----------------------------------------------------------------------------

(element idx
  (make anchor
    id: (id (current-node))
    (empty-sosofo)))

(element vidx
  (process-node-list (attribute "text" (current-node))))


;; #-----------------------------------------------------------------------------
;; # references

(define (render-ref-to-node idref nd)
  (case (gi nd)
    ((section) (make sequence
                 html.ref: idref
                 (sosofo-append
                  (literal "Section “")
                  (process-node-list (attribute "title" nd))
                  (literal "”"))))
    (else (empty-sosofo))))

(element ref
  (let* ((idref (data (attribute "ref" (current-node))))
         (nl (if (> (string-length idref) 0)
                 (elements-with-id idref (current-node))
                 (empty-sosofo))))
    (node-list-reduce nl
                      (lambda (sosofo snl)
                        (sosofo-append sosofo
                                       (render-ref-to-node idref snl)))
                      (empty-sosofo))
    ))


(element result
  (literal "⇒"))

(element expansion
  (literal "↦"))

(element equiv
  (literal "≡"))

(element print
  (literal "⊣"))

(element dots
  (literal "…"))

(element ?
  (enclose "[" (attribute "optionalexpr" (current-node)) "]"))

;; (element error
;;   (make glyph
;;     name: 'error))


;; #-----------------------------------------------------------------------------

(element grammar
  (make display-group
    first-line-start-indent:: 0pt
    start-indent: 0pt
    (process-children)))

(element (grammar p)
  (make paragraph
    first-line-start-indent: 0pt
    start-indent: 0pt
    font-posture: 'italic
    (process-children)))

(element (grammar productions)
  (make display-group
    space-before: 3pt
    space-after: 7pt
    font-size: 8pt
    line-spacing: 11pt
    font-name: "monospace"
    quadding: 'left
    ;;start-indent: -25mm
    (process-children)))

(element (productions p)
  (process-children))

(element (productions p rule)
  (make paragraph
    first-line-start-indent: -75pt
    start-indent: 0pt
    (sosofo-append
     (make line-field
       field-width: 60pt
       field-align: 'left
       (process-node-list (attribute "metaid" (current-node))))
     (make line-field
       field-width: 15pt
       field-align: 'left
       (literal "="))
     (process-node-list (attribute "deflist" (current-node)))
     ;; Literal(' ;')
     )))

(define (format-syntax-opt op sosofo)
  (sosofo-append
   (cond
     ((equal? op "?") (literal "[ "))
     ((equal? op "*") (literal "{ "))
     ((equal? op "1") (literal "( "))
     (else (empty-sosofo)))
   sosofo
   (case op
     ((equal? op "?") (literal " ]"))
     ((equal? op "*") (literal " }"))
     ((equal? op "1") (literal " )"))
     (else (empty-sosofo)))
   ))

(define %brackets-for-non-terminals% #f)

(define (grammar-op? snl)
  (if (eqv? (class snl) 'element)
      (case (gi snl)
        ((choice seq nt term synext) #t)
        (else #f))
      #f))

(element choice
  (let ((elts (node-list-filter (lambda (snl) (grammar-op? snl))
                                (attribute "elements" (current-node)))))
    (format-syntax-opt (data (attribute "op" (current-node)))
                       (process-node-list-join elts (literal " | ")))))

(element seq
  (let ((elts (node-list-filter (lambda (snl) (grammar-op? snl))
                                (attribute "elements" (current-node)))))
    (format-syntax-opt (data (attribute "op" (current-node)))
                       (process-node-list-join elts (literal " ")))))

(element nt
  (format-syntax-opt (data (attribute "op" (current-node)))
                     (if %brackets-for-non-terminals%
                         (sosofo-append
                          (literal "〈")
                          (process-node-list (attribute "text" (current-node)))
                          (literal "〉"))
                         (process-node-list (attribute "text" (current-node))))))

(element term
  (let* ((termdata (data (attribute "text" (current-node))))
         (lquote (if (string-contains? termdata #\x27) "‘" "“"))
         (rquote (if (string-contains? termdata #\x27) "’" "”")) )
    (format-syntax-opt (data (attribute "op?" (current-node)))
                       (make line-field
                         font-name: "monospace"
                         font-weight: 'bold
                         (sosofo-append
                          (literal lquote)
                          (process-node-list (attribute "text" (current-node)))
                          (literal rquote))))))

(element synext
  (format-syntax-opt (data (attribute "op?" (current-node)))
                     (make line-field
                       font-name: "monospace"
                       font-weight: 'medium
                       font-posture: 'italic
                       (sosofo-append
                        (literal "? ")
                        (process-node-list (attribute "text" (current-node)))
                        (literal " ?")))))


;; #-----------------------------------------------------------------------------

(root
    (process-children))

;; color all elements red, which are not covered by some other rule
(default
    (make sequence
      ;;color: (color 'rgb '(1.0, 0.0, 0.0))
      color: (color 'x11 'red)
      (process-children)))
