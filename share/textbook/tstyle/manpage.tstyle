;;; Copyright (c) 2017 Gregor Klinke
;;; All rights reserved.

(use 'common)
(use 'bibref)
(use 'para)


(element opt
  (format-bold (attribute "text" (current-node))))

(element op
  (format-bold (attribute "text" (current-node))))

(element app
  (format-bold (attribute "text" (current-node))))

(element val
  (format-em (attribute "text" (current-node))))

(element file
  (format-em (attribute "text" (current-node))))

(element em
  (format-em (attribute "text" (current-node))))

(element acr
  (process-node-list-trim (attribute "text" (current-node))))


(element section
  (sosofo-append
   ;; head
   (make paragraph
     font-caps: 'small-caps
     font-size: 14pt
     font-weight: 'bold
     break-after?: #f
     keep-with-next?: #t
     first-line-start-indent: 0pt
     space-before: 14pt
     space-after: 7pt
     quadding: "left"
     (process-node-list (attribute "title" (current-node))))

   ;; body
   (make display-group
     start-indent: 20pt
     (sosofo-append
      (make paragraph
        quadding: "justify"
        first-line-start-indent: 0pt
        (process-node-list-trim (children (node-list-first (children (current-node))))))
      (process-node-list-trim (node-list-rest (children (current-node)))))
     ))
  )


(element synopsis
  (sosofo-append
   (make paragraph
     mandoc.section: "synopsis"
     font-caps: 'small-caps
     font-size: 14pt
     font-weight: 'bold
     break-after?: #f
     space-before: 14pt
     space-after: 7pt
     keep-with-next?: #t
     first-line-start-indent: 0pt
     quadding: "left"
     (literal "Synopsis"))
   (make display-group
     start-indent: 20pt
     (process-children-trim))))


(element (manpage info)
  (empty-sosofo))


(define (format-manpage node)
  (let* ((info (select-elements (children node) 'info))
         (authors (select-elements (children info) 'author))
         )
    (sosofo-append
     (make display-group
       (sosofo-append
        (make paragraph
          font-weight: 'bold
          break-after?: #f
          space-before: 0pt
          space-after: 7pt
          keep-with-next?: #t
          first-line-start-indent: 0pt
          quadding: "left"
          (sosofo-append
           (process-node-list (attribute "name" node))
           (literal "(")
           (process-node-list (attribute "section" node))
           (literal ")")))
        (make paragraph
          font-caps: 'small-caps
          font-size: 14pt
          line-spacing: 17pt
          font-weight: 'bold
          break-after?: #f
          space-before: 20pt
          space-after: 7pt
          keep-with-next?: #t
          first-line-start-indent: 0pt
          quadding: "left"
          (literal "Name"))
        (make display-group
          start-indent: 20pt
          (make paragraph
            first-line-start-indent: 0pt
            quadding: "left"
            (sosofo-append
             (process-node-list (attribute "name" node))
             (literal " - ")
             (process-node-list (attribute "desc" node)))))
        ))

     (process-node-list (children node))

     (if (not (node-list-empty? authors))
         (sosofo-append
          (make paragraph
            font-caps: 'small-caps
            font-size: 14pt
            line-spacing: 17pt
            font-weight: 'bold
            break-after?: #f
            space-before: 20pt
            space-after: 7pt
            keep-with-next?: #t
            first-line-start-indent: 0pt
            quadding: "left"
            (literal "Authors"))
          (make display-group
            start-indent: 20pt
            (process-node-list authors)))
         (empty-sosofo))
     )
    ))


(element manpage
  (let* ((info (select-elements (children (current-node)) 'info))
         (authors (select-elements (children info) 'author))
         (author-first (if (> (node-list-length authors) 0)
                           (node-list-first authors)
                           (node-list)))
         (manpage-title (node-property 'data
                                       (attribute "name" (current-node))
                                       default: ""))
         (manpage-desc (node-property 'data
                                      (attribute "desc" (current-node))
                                      default: ""))
         (author-as-string (node-property 'data
                                          (attribute "name" author-first)
                                          default: "N.N."))
         )
    (cond
     ((html-backend?) (make scroll-sequence
                        title: manpage-title
                        metadata.author: author-as-string
                        metadata.desc: manpage-desc

                        font-size: (font-size 3)
                        line-spacing: (line-spacing 3)
                        start-margin: 0pt
                        end-margin: 0pt
                        width: 600px
                        (format-manpage (current-node))))

     ((tex-backend?) (make simple-page-sequence
                       metadata.author: author-as-string
                       metadata.desc: manpage-desc
                       metadata.title: manpage-title
                       font-size: 10pt
                       line-spacing: 14pt
                       (format-manpage (current-node))))
     )
    ))


;; #-----------------------------------------------------------------------------
;; # metainfo support

(element author
  (let ((email (attribute "email" (current-node))))
    (make paragraph
      first-line-start-indent: 0pt
      quadding: "left"
      (sosofo-append
       (process-node-list (attribute "name" (current-node)))
       (if (not (node-list-empty? email))
           (sosofo-append
            (literal " <")
            (process-node-list email)
            (literal ">"))))
      )))


;; #-----------------------------------------------------------------------------
;; # references

(element seealso
  (sosofo-append
   (make paragraph
     font-caps: 'small-caps
     font-size: 14pt
     font-weight: 'bold
     break-after?: #f
     space-before: 14pt
     space-after: 7pt
     keep-with-next?: #t
     quadding: "left"
     (literal "See Also"))
   (make display-group
     start-indent: 20pt
     (process-children))))

(element (seealso mref)
  (make paragraph
    first-line-start-indent: 0pt
    quadding: "left"
    (sosofo-append
     (process-node-list (attribute "name" (current-node)))
     (literal " (")
     (process-node-list (attribute "section" (current-node)))
     (literal ")")
     )))


(element (seealso xref)
  (make paragraph
    first-line-start-indent: 0pt
    quadding: "left"
    (process-node-list (attribute "ref" (current-node)))))


(element (seealso bibref)
  (make paragraph
    first-line-start-indent: -20pt
    start-indent: 20pt
    quadding: "left"
    (format-bibref (current-node))))


(define (render-ref-to-node idref nd)
  (case (gi nd)
    ((section) (make sequence
                 html.ref: idref
                 (sosofo-append
                  (literal "Section “")
                  (process-node-list (attribute "title" nd))
                  (literal "”"))))
    (else (empty-sosofo))))

(element ref
  (let* ((idref (data (attribute "ref" (current-node))))
         (nl (if (> (string-length idref) 0)
                 (elements-with-id idref (current-node))
                 (empty-sosofo))))
    (node-list-reduce nl
                      (lambda (sosofo snl)
                        (sosofo-append sosofo
                                       (render-ref-to-node idref snl)))
                      (empty-sosofo))
    ))


(root
    (process-children))
