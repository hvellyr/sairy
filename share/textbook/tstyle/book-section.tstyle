;;; Copyright (c) 2017 Gregor Klinke
;;; All rights reserved.

(define (-spc-bef lvl)
  (display-space (line-spacing lvl) conditional?: #t))

(define (-spc-aft val)
  (display-space val conditional?: #t))

(define (section-layout gi)
  (case gi
   ;;               #font-size line-spacing weight posture before after number-style
   ((part)          (vector (font-size 6) (line-spacing 6) 'bold  'upright (-spc-bef 6) (-spc-aft 8pt) "I"))
   ((chapter)       (vector (font-size 5) (line-spacing 5) 'bold  'upright (-spc-bef 5) (-spc-aft 7pt) "1"))
   ((appendix)      (vector (font-size 5) (line-spacing 5) 'bold  'upright (-spc-bef 5) (-spc-aft 7pt) "A"))
   ((index)         (vector (font-size 5) (line-spacing 5) 'bold  'upright (-spc-bef 5) (-spc-aft 7pt) #f))
   ((preface)       (vector (font-size 5) (line-spacing 5) 'bold  'upright (-spc-bef 5) (-spc-aft 7pt) #f))
   ((introduction)  (vector (font-size 5) (line-spacing 5) 'bold  'upright (-spc-bef 5) (-spc-aft 7pt) #f))
   ((content)       (vector (font-size 5) (line-spacing 5) 'bold  'upright (-spc-bef 5) (-spc-aft 7pt) #f))
   ((section)       (vector (font-size 4) (line-spacing 4) 'bold  'upright (-spc-bef 4) (-spc-aft 7pt) "1"))
   ((subsection)    (vector (font-size 3) (line-spacing 3) 'bold  'upright (-spc-bef 3) (-spc-aft 7pt) "1"))
   ((subsubsection) (vector (font-size 3) (line-spacing 3) 'bold  'italic  (-spc-bef 3) (-spc-aft 7pt) "1"))
   ((synopsis)      (vector (font-size 4) (line-spacing 4) 'bold  'upright (-spc-bef 4) (-spc-aft 7pt) #f))
   ((seealso)       (vector (font-size 4) (line-spacing 4) 'bold  'upright (-spc-bef 4) (-spc-aft 7pt) #f))
   ))

(define (div-number nd num-format)
  (let ((idx (+ (node-list-length (select-elements (preced nd) (gi nd)))
                1)))
    (format-number idx num-format)))


(define (any-section? nd)
  (case (gi nd)
    ((part chapter section subsection subsubsection appendix index
           preface introduction content synopsis seealso) #t)
    (else #f)))


(define (section-title-number-tokens nd)
  (let loop ((p nd)
             (numbers (list)))
    (if (not (any-section? p))
        (reverse numbers)
        (let* ((layout (section-layout (gi p)))
               (num-format (vector-ref layout 6)))
          (loop (parent p)
                (if num-format
                    (append numbers (list (div-number p num-format)))
                    numbers))) )))


(define (section-title-number nd)
  (string-join (section-title-number-tokens nd) "."))


(define (section-title-sosofo title nd)
  (let ((node-title (attribute "title" nd)))
    (if (= (node-list-length node-title) 0)
        (if title
            (literal title)
            (empty-sosofo))
        (process-node-list node-title))))

(define (non-p? nd)
  (case (gi nd)
    ((part admon itemize enumerate) #t)
    (else #f)))

(define (format-title title-num sep title)
  (case %style%
    ((classic) (format-title-classic title-num sep title))
    ((modern) (format-title-modern title-num sep title))
    (else (format-title-modern title-num sep title))))

(define (format-title-modern title-num sep title)
  (sosofo-append
   (make line-field
     field-width: 41mm
     field-align: 'right
     (if (sosofo? title-num)
        title-num
        (process-node-list title-num)))
   (make line-field
     field-width: 4mm
     (empty-sosofo))
   (if (sosofo? title)
       title
       (process-node-list title))))

(define (format-title-classic title-num sep title)
  (sosofo-append
   (if (sosofo? title-num)
       title-num
       (process-node-list title-num))
   sep
   (if (sosofo? title)
       title
       (process-node-list title))))

(define (format-section title nd)
  (case %style%
    ((classic) (format-section-classic title nd))
    ((modern) (format-section-modern title nd))
    (else (format-section-modern title nd))))

(define (format-section-modern title nd)
  (let* ((layout (section-layout (gi nd)))
         (dont-show-number (string=? (data (attribute "show-number" nd)) "no"))
         (title-num-str (if dont-show-number
                            ""
                            (section-title-number nd)))
         (title-num-sosofo (literal title-num-str))
         (title-sosofo (section-title-sosofo title nd))
         )
    (sosofo-append
     (make anchor
       id: (id nd))
     (make paragraph
       font-size: (vector-ref layout 0)
       line-spacing: (vector-ref layout 1)
       space-before: (vector-ref layout 4)
       space-after:  (vector-ref layout 5)
       font-weight:  (vector-ref layout 2)
       font-posture: (vector-ref layout 3)

       keep-with-next?: #t
       first-line-start-indent: %page-left-offset-neg%
       start-indent: 0pt
       quadding: 'left

       (format-title title-num-sosofo (empty-sosofo) title-sosofo))

     (let ((nl (children nd)))
       (if (or (node-list-empty? nl)
               (any-section? (node-list-first nl))
               (not (eqv? (gi (node-list-first nl)) 'p)))
           (process-node-list-left-trim-idx-ws nl)
           (sosofo-append
            (make paragraph
              quadding: 'justify
              first-line-start-indent: 0pt
              (process-node-list-left-trim-idx-ws (children (node-list-first nl))))
            (process-node-list-left-trim-idx-ws (node-list-rest nl)))
           ))
     )))

(define (format-section-classic title nd)
  (let* ((layout (section-layout (gi nd)))
         (dont-show-number (string=? (data (attribute "show-number" nd)) "no"))
         (title-num-str (if dont-show-number
                            ""
                            (section-title-number nd)))
         (title-num-sosofo (literal title-num-str))
         (title-sep (if (> (string-length title-num-str) 0)
                        (literal " ")
                        (empty-sosofo)))
         (title-sosofo (section-title-sosofo title nd))
         )
    (sosofo-append
     (make anchor
       id: (id nd))
     (make paragraph
       font-size: (vector-ref layout 0)
       line-spacing: (vector-ref layout 1)
       space-before: (vector-ref layout 4)
       space-after:  (vector-ref layout 5)
       font-weight:  (vector-ref layout 2)
       font-posture: (vector-ref layout 3)

       keep-with-next?: #t
       first-line-start-indent: 0mm
       start-indent: 0pt
       quadding: 'center

       (format-title title-num-sosofo title-sep title-sosofo))

     (let ((nl (children nd)))
       (if (or (node-list-empty? nl)
               (any-section? (node-list-first nl))
               (not (eqv? (gi (node-list-first nl)) 'p)))
           (process-node-list-left-trim-idx-ws nl)
           (sosofo-append
            (make paragraph
              quadding: 'justify
              first-line-start-indent: 0pt
              (process-node-list-left-trim-idx-ws (children (node-list-first nl))))
            (process-node-list-left-trim-idx-ws (node-list-rest nl)))
           ))
     )))

(define %chapters-on-separate-pages% #f)
(element chapter
  (make display-group
    break-before?: (if %chapters-on-separate-pages% 'page #f)
    (format-section "Chapter" (current-node))))

(element introduction
  (make display-group
    break-before?: (if %chapters-on-separate-pages% 'page #f)
    (format-section "Introduction" (current-node))))

(element preface
  (make display-group
    break-before?: (if %chapters-on-separate-pages% 'page #f)
    (format-section "Preface" (current-node))))

(element section
  (format-section "Section" (current-node)))

(element subsection
  (format-section #f (current-node)))

(element subsubsection
  (format-section #f (current-node)))

(element paragraph
  (format-section #f (current-node)))

(element appendix
  (make display-group
    break-before?: (if %chapters-on-separate-pages% 'page #f)
    (format-section "Appendix" (current-node))))

(element index
  (make display-group
    break-before?: 'page
    (format-section "Index" (current-node))))

;; part
;; tome
