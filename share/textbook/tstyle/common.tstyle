;;; Copyright (c) 2017 Gregor Klinke
;;; All rights reserved.

(define (html-backend?)
  (string=? %backend% "html"))

(define (tex-backend?)
  (string=? %backend% "tex"))

;; @doc format list in 'upright font-posture.  If @prm{seq} is a sosofo it is
;; taken asis, otherwise it is processed.
(define (format-r seq)
  (make sequence
    font-posture: 'upright
    (if (sosofo? seq)
        seq
        (process-node-list seq))))

;; @doc format list in 'italic font-posture.  If @prm{seq} is a sosofo it is
;; taken asis, otherwise it is processed.
(define (format-em seq)
  (make sequence
    font-posture: 'italic
    (if (sosofo? seq)
        seq
        (process-node-list seq))))

;; @doc format list in 'bold font-weight.  If @prm{seq} is a sosofo it is taken
;; asis, otherwise it is processed.
(define (format-bold seq)
  (make sequence
    font-weight: 'bold
    (if (sosofo? seq)
        seq
        (process-node-list seq))))

;; @doc format list in monospace font.  If @prm{seq} is a sosofo it is taken
;; asis, otherwise it is processed.
(define (format-monospace seq)
  (make sequence
    font-posture: 'upright
    font-name: "monospace"
    (if (sosofo? seq)
        seq
        (process-node-list seq))))

;; @doc format list in 'small-caps font-caps.  If @prm{seq} is a sosofo it is taken
;; asis, otherwise it is processed.
(define (format-ss seq)
  (make sequence
    font-caps: 'smallcaps
    (if (sosofo? seq)
        seq
        (process-node-list seq))))

;; @doc format list in 'caps font-caps.  If @prm{seq} is a sosofo it is taken
;; asis, otherwise it is processed.
(define (format-upper seq)
  (make sequence
    font-caps: 'caps
    (if (sosofo? seq)
        seq
        (process-node-list seq))))

;; @doc return a sosofo with @prm{before} and @prm{after} put around @prm{seq}.
;; If @prm{seq} is a sosofo it is taken asis, otherwise it is processed.  If
;; @prm{before} or @prm{after} are sosofos they are taken asis, otherwise they
;; are expected to be strings and are handed to @fun{literal}.
(define (enclose before seq after)
  (sosofo-append
   (if (sosofo? before)
       before
       (literal before))
   (if (sosofo? seq)
       seq
       (process-node-list seq))
   (if (sosofo? after)
       after
       (literal after))))
