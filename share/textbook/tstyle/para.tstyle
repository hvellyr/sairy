;;; Copyright (c) 2017 Gregor Klinke
;;; All rights reserved.

(use 'common)


;; ------------------------------------------------------------------------------

(define (invisible-tag? snl)
  (case (gi snl)
    ((idx) #t)
    (else #f)))

(define (empty-text-node? snl)
  (and (equal? (class snl) 'text)
       (= (string-length (string-trim-both (node-property 'data snl))) 0)))

(define (process-node-list-left-trim-idx-ws nl)
  (let loop ((np nl)
             (sosofo (empty-sosofo))
             (skip-ws? #f))
    (if (node-list-empty? np)
        sosofo
        (let ((snl (node-list-first np)))
          (if (invisible-tag? snl)
              (loop (node-list-rest np)
                    (sosofo-append sosofo (process-node-list snl))
                    #t)
              (cond
               ((and (empty-text-node? snl) skip-ws?)
                (loop (node-list-rest np) sosofo #t))
               ((and (equal? (class snl) 'text) skip-ws?)
                (loop (node-list-rest np)
                      (sosofo-append sosofo
                                     (process-node-list-trim snl right?: #f))
                      #t))
               (else (sosofo-append sosofo (process-node-list np))))
              )))))

(define (process-p nd startind endind)
  (let ((nds (node-list-filter (lambda (snl)
                                 (not (or (invisible-tag? snl)
                                          (empty-text-node? snl))))
                               (children nd))))
    (if (node-list-empty? nds)
        (make display-group
          (process-node-list-left-trim-idx-ws (children nd)))
        (make paragraph
          first-line-start-indent: 0pt
          quadding: "justify"
          space-before: %gap-between-paragraphs%
          start-indent: startind
          end-indent: endind
          (process-node-list-left-trim-idx-ws (children nd)))
        )))

(element p
  (process-p (current-node) 0pt 0pt))


;; #-----------------------------------------------------------------------------
;; # definitions and lists

(element definitions
  (make display-group
    space-before: (display-space 7pt conditional?: #t)
    space-after: (display-space 7pt conditional?: #t)
    (process-children-trim)))

(element (definitions p item)
  (make line-field
    field-width: (inline-space 70pt max: 'inf)
    field-align: 'left
    (sosofo-append
     (process-node-list-trim (attribute "text" (current-node)))
     (make-char 'non-breaking-space))))

(element (definitions p)
  (let ((item (node-list-first (children (current-node)))))
    (if (equal? (gi item) 'item)
        (if (> (string-length (data (attribute "text" item))) 15)
            (sosofo-append
             (make paragraph
               first-line-start-indent: 0pt
               start-indent: 0pt
               quadding: 'justify
               (process-node-list (node-list-first (children (current-node)))))
             (make paragraph
               first-line-start-indent: 0pt
               start-indent: 70pt
               quadding: 'justify
               (process-node-list-trim (node-list-rest (children (current-node)))))
             )
            (make paragraph
              first-line-start-indent: -70pt
              start-indent: 70pt
               quadding: 'justify
              (sosofo-append
               (process-node-list (node-list-first (children (current-node))))
               (process-node-list-trim (node-list-rest (children (current-node)))))))
        (make paragraph
          first-line-start-indent: 0pt
          start-indent: 70pt
          quadding: 'justify
          (process-children-trim)
          ) ))
  )


(element itemize
  (make display-group
    space-before: (display-space 7pt conditional?: #t)
    space-after: (display-space 7pt conditional?: #t)
    (process-children-trim)))

(element (itemize p item)
  (make line-field
    field-width: 12pt
    field-align: 'left
    (let ((txt (attribute "text" (current-node))))
      (if (node-list-empty? txt)
          (make-char 'bullet)
          (process-node-list-trim txt) )) ))

(element (itemize p)
  (let ((item (node-list-first (children (current-node)))))
    (if (equal? (gi item) 'item)
        (make paragraph
          first-line-start-indent: -12pt
          start-indent: 12pt
          (sosofo-append
           (process-node-list (node-list-first (children (current-node))))
           (process-node-list-trim (node-list-rest (children (current-node))))))
        (make paragraph
          first-line-start-indent: 0pt
          start-indent: 12pt
          (process-children-trim)
          ) ))
  )


;;------------------------------------------------------------------------------

(define (item-number nd)
  (let* ((nds (select-elements (preced (parent nd)) 'p))
         (item-nds (node-list-filter (lambda (snl)
                                       (let ((c (children snl)))
                                         (and (not (node-list-empty? c))
                                              (eqv? (gi (node-list-first c)) 'item))))
                                     nds)))
    (+ (node-list-length item-nds) 1)))

(element enumerate
  (make display-group
    space-before: (display-space 7pt conditional?: #t)
    space-after: (display-space 7pt conditional?: #t)
    (process-children-trim)))

(element (enumerate p item)
  (make line-field
    field-width: 12pt
    field-align: 'left
    (let ((txt (attribute "text" (current-node))))
      (if (node-list-empty? txt)
          (sosofo-append
           (literal (number->string (item-number (current-node))))
           (literal ". "))
          (process-node-list-trim txt) )) ))

(element (enumerate p)
  (let ((item (node-list-first (children (current-node)))))
    (if (equal? (gi item) 'item)
        (make paragraph
          first-line-start-indent: -12pt
          start-indent: 12pt
          (sosofo-append
           (process-node-list (node-list-first (children (current-node))))
           (process-node-list-trim (node-list-rest (children (current-node))))))
        (make paragraph
          first-line-start-indent: 0pt
          start-indent: 12pt
          (process-children-trim)
          ) ))
  )


;; -----------------------------------------------------------------------------
;; quote

(mode quote-mode
  (element p
    (process-p (current-node) %quote-left-indent% %quote-right-indent%))
  )

(element quote
  (make display-group
    space-before: (display-space 7pt conditional?: #t)
    space-after:  (display-space 7pt conditional?: #t)
    end-indent: %quote-right-indent%
    font-size:    (font-size 1)

    (with-mode quote-mode
      (process-children))))
