@c -*-textbook-*-

@section{Expression language}

@subsection{Nodes}

@deffn{(node-property @prm{propname} @prm{snl} @?{@prm{default: #f}})}{node-property}
Returns the value of property @prm{propname} of @prm{snl}.  If @prm{snl} doesn't
have such a property set returns @prm{default} or, if that's no given, signals an
error.
@end deffn

@deffn{(gi @prm{snl})}{gi}
Returns the @dfn{general identifier} of a node @prm{snl}, i.e. the name of the
node's class.
@end deffn

@deffn{(id @prm{osnl})}{id}
Returns the value of the @var{id} property of the node in @prm{osnl}.  If no
@var{id} property is set returns the value of the @var{auto-id} property.  If
@prm{osnl} is empty or neither property is set on it returns the empty string.
@end deffn

@deffn{(class @prm{snl})}{class}
@end deffn

@deffn{(parent @prm{snl})}{parent}
@end deffn

@deffn{(children @prm{snl})}{children}
@end deffn

@deffn{(siblings @prm{snl})}{siblings}
@end deffn

@deffn{(follow @prm{snl})}{follow}
@end deffn

@deffn{(preced @prm{snl})}{preced}
@end deffn

@deffn{(ancestors @prm{snl})}{ancestors}
@end deffn

@deffn{(descendants @prm{snl})}{descendants}
@end deffn

@deffn{(absolute-first-sibling? @prm{snl})}{absolute-first-sibling?}
@end deffn

@deffn{(absolute-last-sibling? @prm{snl})}{absolute-last-sibling?}
@end deffn

@deffn{(absolute-first-element-sibling? @prm{snl})}{absolute-first-element-sibling?}
@end deffn

@deffn{(absolute-last-element-sibling? @prm{snl})}{absolute-last-element-sibling?}
@end deffn

@deffn{(elements-with-id @prm{id} @prm{snl})}{elements-with-id}
Returns a new nodelist with all elements having an identifier @prm{id} from
@prm{snl}'s grove.
@end deffn

@deffn{(data @prm{nl})}{data}
Returns the textual data of all nodes in @prm{nl} concatenated.  The data of a
node is its @val{data} and @val{data-attr} (string) properties.
@end deffn

@deffn{(attributes @prm{nl})}{attributes}
Returns the @var{attributes} property of all nodes in @prm{nl} concatenated into
a new nodelist.
@end deffn

@deffn{(attribute @prm{name} @prm{nl})}{attribute}
Returns the mapping over @prm{nl} of the function that returns the
member of the value of the attributes property whose name is @prm{name}.
@end deffn

@end subsection


@subsection{Addresses}

Producing cross references in textbook is done with the @ty{link} formatting
object and the @ty{address} type of the expression language.

The @class{address} type represents the address of the destination.  It supports
local references (to nodes inside of the current document) and external
addresses (as URIs).

@deffn{(address? @prm{obj})}{address?}
Indicates whether @prm{obj} is of type @class{address}.
@end{deffn}

@deffn{(address-local? @prm{adr})}{address-local?}
Indicates whether @prm{adr} is a local address.
@end{deffn}

@deffn{(external-address @prm{URL})}{external-address}
Returns an address object representing the resource referred to by @prm{url}.
@end{deffn}

@deffn{(current-node-address)}{current-node-address}
Returns an address object representing the current node.
@end{deffn}

@deffn{(node-list-address @prm{nl})}{node-list-address}
Returns a list of an address objects refering each to the nodes in @prm{nl}.
@end{deffn}

@end subsection


@subsection{Node list access and manipulation}

@deffn{(node-list @prm{nl1} @prm{nl2} ... @prm{nln})}{node-list}
Returns the node-list that results from appending the members of @prm{nl1},
@prm{nl2}, ... @prm{nln}.  If there are no arguments, returns the empty
node-list.
@end{deffn}

@deffn{(node-list-property @prm{propname} @prm{nl})}{node-list-property}
Returns the mapping over @prm{nl} of the function on a node that returns
the value that the node exhibits for the property @prm{propname} or an empty
node-list if the node does not exhibit a value or exhibits a null value for
@prm{propname}.  @prm{propname} can be specified in any of the ways allowed
for the @fun{node-property} procedure.
@end{deffn}

@deffn{(node-list-reduce @prm{nl} @prm{proc} @prm{obj})}{node-list-reduce}
If @prm{nl} has no members, returns @prm{obj}, and otherwise returns the result
of applying node-list-reduce to
@itemize
 @item a node-list containing all but the first member of nl,
 @item proc, and
 @item the result of applying proc to obj and the first member of nl.
@end{itemize}
@end{deffn}

@deffn{(node-list-map @prm{proc} @prm{nl})}{node-list-map}
For each member of @prm{nl}, applies @prm{proc} to a singleton node-list
containing just that member and appends the resulting node-lists.  It shall
be an error if @prm{proc} does not return a node-list when applied to any
member of @prm{nl}.
@end{deffn}

@deffn{(node-list-filter @prm{predicate} @prm{nl})}{node-list-filter}
Returns a node-list containing just those members of @prm{nl} for which
@prm{predicate} applied to a singleton node-list containing just that member
does not return #f.  The resulting members in node-list preserve their order
from @prm{nl}.
@end{deffn}

@deffn{(node-list->list @prm{nl})}{node-list->list}
Returns a list containing, for each member of nl, a singleton node-list
containing just that member.
@end{deffn}

@deffn{(node-list-reverse @prm{nl})}{node-list-reverse}
Returns a node-list containing the members of @prm{nl} in reverse order.
@end{deffn}

@deffn{(node-list-ref @prm{nl} @prm{k})}{node-list-ref}
Returns a node-list containing the @prm{k}th member of nl (zero-based),
if there is such a member, and otherwise returns the empty node-list.
@end{deffn}

@deffn{(node-list-tail @prm{nl} @prm{k})}{node-list-tail}
Returns the node-list comprising all but the first @prm{k} members of
@prm{nl}.  If @prm{nl} has @prm{k} or fewer members, returns the empty
node-list.
@end{deffn}

@deffn{(node-list-head @prm{nl} @prm{k})}{node-list-head}
Returns a node-list comprising the first @prm{k} members of @prm{nl}.
If @prm{nl} has @prm{k} or fewer members, returns @prm{nl}.
@end{deffn}

@deffn{(node-list-sublist @prm{nl} @prm{k1} @prm{k2})}{node-list-sublist}
Returns a node-list containing those members of @prm{nl} from index
@prm{k1} inclusive to @prm{k2} exclusive.
@end{deffn}

@deffn{(named-node-list-names @prm{nnl})}{named-node-list-names}
Returns the names of all members of @prm{nnl} in the same order as
@prm{nnl} as list.
@end{deffn}

@deffn{(node-list=? @prm{nl1} @prm{nl2})}{node-list=?}
Returns @val{#t} if @prm{nl1} and @prm{nl2} are the same node-list, that is, they contain
the same members in the same order, and otherwise returns @val{#f}.
@end deffn

@deffn{(node-list-contains? @prm{nl} @prm{snl})}{node-list-contains?}
Returns @val{#t} if @prm{nl} contains a node equal to the member of @prm{snl},
and otherwise returns @val{#f}.
@end deffn

@deffn{(node-list-remove-duplicates @prm{nl})}{node-list-remove-duplicates}
Returns a node-list which is the same as @prm{nl} except that any member
@prm{nl} which is equal to a preceding member of @prm{nl} is removed.
@end deffn

@deffn{(node-list-union @prm{nl1} @prm{nl2} ... @prm{nln})}{node-list-union}
Returns a node-list containing the union of all the arguments, which
shall be node-lists.  The result shall contain no duplicates.  With no
arguments, an empty node-list shall be returned.
@end deffn

@deffn{(node-list-intersection @prm{nl1} @prm{nl2} ... @prm{nln})}{node-list-intersection}
Returns a node-list containing the intersection of all the arguments,
which shall be node-lists.  The result shall contain no duplicates.  With no
arguments, an empty node-list shall be returned.
@end deffn

@deffn{(node-list-difference @prm{nl1} @prm{nl2} ... @prm{nln})}{node-list-difference}
Returns a node-list containing the set difference of all the arguments,
which shall be node-lists.  The set difference is defined to be those members
of the first argument that are not members of any of the other arguments.
The result shall contain no duplicates.  With no arguments, an empty
node-list shall be returned.
@end deffn

@deffn{(node-list-some? @prm{proc} @prm{nl})}{node-list-some?}
Returns @val{#t} if, for some member of @prm{nl}, @prm{proc} does not return
@val{#f} when applied to a singleton node-list containing just that member, and
otherwise returns @val{#f}.  An implementation is allowed, but not required, to
signal an error if, for some member of @prm{nl}, @prm{proc} would signal an
error when applied to a singleton node-list containing just that member.
@end deffn

@deffn{(node-list-every? @prm{proc} @prm{nl})}{node-list-every?}
Returns @val{#t} if, for every member of @prm{nl}, @prm{proc} does not return
@val{#f} when applied to a singleton node-list containing just that member, and
otherwise returns @val{#f}.  An implementation is allowed to signal an error if,
for some member of @prm{nl}, @prm{proc} would signal an error when applied to
a singleton node-list containing just that member.
@end deffn

@end subsection


@subsection{Processing nodes}

@deffn{(process-children)}{process-children}
Returns the sosofo that results from appending the sosofos that result
from processing in order the children of the current node.
@end deffn

@deffn{(process-children-trim)}{process-children-trim}
Returns the sosofo that results from appending the sosofos that result
from processing in order the children of the current node after removing any
leading and trailing whitespace from leading and trailing text nodes.
@end deffn

@deffn{(process-node-list-join @prm{nl} @prm{sep})}{process-node-list-join}
Returns the sosofo that results from appending the sosofos that result
from processing in order the elements of @prm{nl}.  Each sosofo such produced
is separated by @prm{sep} which should be a valid sosofo.

If @prm{nl} contains zero or extactly one node @prm{sep} is not added at all.
@end deffn

@deffn{(process-node-list @prm{nl})}{process-node-list}
Returns the sosofo that results from appending the sosofos that result
from processing the members of the @prm{nl} in order.
@end deffn

@deffn{(process-node-list-trim @prm{nl}
                               @?{@prm{left?: #t}}
                               @?{@prm{right?: #t}})}{process-node-list-trim}
Returns the sosofo that results from appending the sosofos that result
from processing @prm{nl} in order after removing any leading and trailing
whitespace from leading and trailing text nodes.
@end deffn

@deffn{(current-node)}{current-node}
Returns the node currently processed as a singleton node list.
@end deffn

@end subsection


@subsection{Selecting and matching elements}

@deffn{(match-element? @prm{pattern} @prm{snl})}{match-element?}
Returns @val{#t} if @prm{snl} is a node of class @ty{element} that matches
@prm{pattern}.

@prm{pattern} is either a list or a single match-step, where each match-step is
either a string, symbol, or a vector.  In case of a single match-step the
pattern is treated as if it was a singleton list with that match-step.

If a match-step is a vector it takes the form @code{#(class: value)}, with the
following @code{class}es being defined:

@definitions
@item{@code{gi:}} the @code{value} of the match step is a single string or
symbol.  A node in @prm{snl} will match the step, when its general identifier
(as returned by @fun{gi}) is equal to this step's @code{value}.

@item{@code{gis:}} the @code{value} is a list of strings or symbols.  A node in
@prm{snl} will match, if its general identifier is equal to any of the strings
or symbols in this list.
@end definitions

If the match-step is a single string or symbol it is a short-hand form for
@code{#(gi: string)}.

The element matches the list if the last item in the pattern matches the
element, and the next to last matches the element's parent, and so on.

For example, @code{(match-element? '(A B C) nd)} returns @val{#t} if

@itemize
@item the GI of @code{nd} is @val{C},
@item the GI of @code{nd}'s parent is @val{B},
@item the GI of @code{nd}'s grandparent is @val{A}.
@end itemize

The expression @code{(match-element? '(A #(gis: (B C)) #(gis: (D E F))))},
returns @val{#t} if

@itemize
@item the GI of @code{nd} is any of @val{D}, @val{E}, or @val{F},
@item the GI of @code{nd}'s parent is either @val{B} or @val{C},
@item the GI of @code{nd}'s grandparent is @val{A}.
@end itemize

@end deffn

@deffn{(select-elements @prm{nl} @prm{pattern})}{select-elements}
Returns a node-list composed of all nodes in @prm{nl} that match @prm{pattern}
as defined by @fun{match-element?}.
@end deffn

@end subsection
@end section
