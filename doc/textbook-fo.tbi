@c -*-textbook-*-

@section{Formatting Objects}
@subsection{Constructing Formatting Objects and Sosofos}

@c default
@c element
@c format-number
@c id
@c root
@c style
@c text

@deffn{(make @prm{flow-object-class-name} @prm{keyword-argument*}
       @prm{content-expression*})}{make}

Creates a formatting object of class @prm{flow-object-class-name}.  The
formatting object's characteristics are set by the @prm{keyword-argument}s.

Each @prm{content-expression} shall return an object of type @ty{sosofo}.  The
sosofos returned by the @prm{content-expression}s are concatenated to form the
content of the formatting object.  If @prm{flow-object-class-name} is atomic no
@prm{content-expression} is allowed.

The following keywords are allowed as @prm{keyword-argument}:

@itemize
@item A keyword that is the name of a characteristic of any formatting object
  and specifies its value.
@item @vidx{@keyw{use:}}{sym} specifying a style to be used for the construction
  of the formatting object.  The value should be a style object or @val{#f}
  to indicate to not use any style object.
@item @vidx{@keyw{label:}}{sym} specifying the name of a port this formatting
  object specification is bound to.  This bind is inherited to all contained
  sosofos by this formatting object.  This allows to direct selected sosofos
  to specific areas.  It is only useful for structuring formatting objects
  which support multiple named ports (e.g. @ty{screen-set}).
@end itemize

@example
(element p
 (make paragraph
    first-line-start-indent: 0pt
    quadding: "justify"
    (process-children)))
@end example
@end deffn


@deffn{(empty-sosofo)}{empty-sosofo}
Returns an empty sosofo.
@end deffn

@deffn{(literal @prm{string})}{literal}
Returns a formatting object of type @ty{literal} with the string value
@prm{string}.
@end deffn

@deffn{(make-char @prm{name})}{make-char}
Returns a formatting object of type @ty{literal} with a single character
created from @prm{name}.  This function can be used to generate special
characters which are hard to introduce via unicode input.  Only a limited set of
characters are available as names.

@example
(make-char 'non-breaking-space)  @equiv (literal (string #\xa0))
@end example
@end deffn

@end subsection


@subsection{Common properties on formatting objects}{sect.common-props}

A number of formatting objects accept setting @dfn{font specifics}.  All
formatting objects use the same semantics for the same properties:

@definitions
@def{}{font-size:}{font-size:}{prop.font-size}
is a length-spec giving the size of the font.  The default value is @val{10pt}.
@end def
@def{}{font-caps:}{font-caps:} is a symbol specifying the capitialization
  of the text.  Possible values are @val{normal}, @val{lower}, @val{caps},
  @val{small-caps}.  If @val{#f} the default @code{(inherited)} value is used.

@example
(make foo
  font-caps: #t)
@end example
@end def
@def{}{position-point-shift:}{position-point-shift:} @c LengthSpec(kDimen, 0, k_pt)),
@end def
@def{}{font-name:}{font-name:} a string specifying the name of the font
  family to use.  If @val{#f} use the default @code{(inherited)} font.  The
  three abstract font family names @val{"serif"}, @val{"sans-serif"} and
  @val{"monospace"} are always available and are mapped to appropriate system
  fonts.  The default value is @val{"serif"}.
@end def
@def{}{font-posture:}{font-posture:} is a symbol specifying the slantedness
  of the font.  Default is @val{upright}.  Possible values depend on the
  backend processor, but typically these are: @val{upright}, @val{italic},
  @val{oblique}.
@end def
@def{}{font-weight:}{font-weight:} is the weight of the font specified as
  symbol.  Supported values depend on the font and the backend processor,
  but typical values are: @val{medium}, @val{bold}, @val{semibold}.  Defaults
  to @val{medium}.
@end def
@def{}{line-spacing:}{line-spacing:} is a length-spec specifing the spacing
  between lines.  The default value is @val{12pt}.
@end def
@end definitions

@c @definitions
@c @item{@vidx{@var{font-size:}}{sym}} is a length-spec giving the size of the
@c   font.  The default value is @val{10pt}.
@c @item{@vidx{@var{font-caps:}}{sym}} is a symbol specifying the capitialization
@c   of the text.  Possible values are @val{normal}, @val{lower}, @val{caps},
@c   @val{small-caps}.  If @val{#f} the default @code{(inherited)} value is used.
@c @item{@vidx{@var{position-point-shift:}}{sym}} @c LengthSpec(kDimen, 0, k_pt)),
@c @item{@vidx{@var{font-name:}}{sym}} a string specifying the name of the font
@c   family to use.  If @val{#f} use the default @code{(inherited)} font.  The
@c   three abstract font family names @val{"serif"}, @val{"sans-serif"} and
@c   @val{"monospace"} are always available and are mapped to appropriate system
@c   fonts.  The default value is @val{"serif"}.
@c @item{@vidx{@var{font-posture:}}{sym}} is a symbol specifying the slantedness
@c   of the font.  Default is @val{upright}.  Possible values depend on the
@c   backend processor, but typically these are: @val{upright}, @val{italic},
@c   @val{oblique}.
@c @item{@vidx{@var{font-weight:}}{sym}} is the weight of the font specified as
@c   symbol.  Supported values depend on the font and the backend processor,
@c   but typical values are: @val{medium}, @val{bold}, @val{semibold}.  Defaults
@c   to @val{medium}.
@c @item{@vidx{@var{line-spacing:}}{sym}} is a length-spec specifing the spacing
@c   between lines.  The default value is @val{12pt}.
@c @end definitions

@end subsection


@subsection{Modes}

The style language always works in @dfn{modes}.  There is a default mode which
contains all matching rules not defined in a mode explicitly.  These rules are
also active when processing elements inside of specific modes, but the default
mode rules have a lower priority.

@deffn{(mode @prm{mode-id} @prm{matching-rules} ...)}{mode}
Defining rules inside a specific mode is achieved with the @fun{mode} form.  All
@prm{matching-rules} defined inside the mode expression's scope are defined
inside the mode @prm{mode-id}.

@example
(mode title-mode
 (element p
   ...)
 (element info
   ...)
 )
@end example
@end deffn

@deffn{(with-mode @prm{mode-id} @prm{expression})}{with-mode}
Evaluates @prm{expression} with the processing mode @prm{mode-id} as defined by
a previous @fun{mode} specification.
@end deffn

@deffn{(current-mode)}{current-mode}
Returns the mode currently set.
@end deffn

@end subsection


@subsection{Working with sosofos}

@deffn{(sosofo? @prm{o})}{sosofo?}
Indicates whether @prm{o} is an object of type @ty{sosofo}.
@end deffn

@deffn{(sosofo-append @prm{sosofos})}{sosofo-append}
Returns the sosofo that results from appending all sosofos.  If @prm{sosofos} is
the empty sosofo returns an empty sosofo.

@example
(sosofo-append
  (literal "«")
  (process-children)
  (literal "»"))
@end example
@end deffn

@end subsection


@subsection{Color}

@deffn{(color? @prm{o})}{color?}
Indicates whether @prm{o} is an object of type @ty{color}.
@end deffn

@deffn{(color @prm{color-space} @prm{arg} ...)}{color}
Returns an object of type color from the color space specified by
@prm{color-space}.  The arguments depend on the space used.

@example
(color 'rgb '(0.5 0.4 0.4))
(color 'cmyk '(0.2 0.0 0.9 1.0))
(color 'x11 'turquoise)
@end example
@end deffn
@end subsection


@subsection{Spaces, dimensions}
@deffn{(display-space? @prm{o})}{display-space?}
Indicates whether @prm{o} is an object of type @ty{display-space}.
@end deffn

@deffn{(display-space @prm{length-spec} @?{@prm{min:}} @?{@prm{max:}}
               @?{@prm{conditional?:}} @?{@prm{priority:}})}{display-space}
Creates a new object of type @ty{display-space}.

tbd.
@end deffn

@deffn{(inline-space? @prm{o})}{inline-space?}
Indicates whether @prm{o} is an object of type @ty{inline-space}.
@end deffn

@deffn{(inline-space @prm{length-spec} @?{@prm{min:}} @?{@prm{max:}})}{inline-space}
tbd.
@end deffn
@end subsection


@subsection{Page and top formatting objects}

At the top of the sosofo there must be one structuring formatting object.  It
prescribes how the overall layout of the “page” should look and behave.  These
structuring formatting objects are typically media aware, i.e. they care about
“endless” media (like websites) compared to “paged” media (books, journals,
etc.).

@def{Formatting Object}{simple-page-sequence}
A simple page sequence provides the document master for a sequence of pages,
with each page having the same (physical) size and layout.  The page layout
provides areas for a header, a footer and the text body.  Both header and footer
areas are split into a left, middle, and right area, which allows for simple but
typical page title and page numbering styles.

A simple page sequence is typically used for (printed) books and journals.

@figure{Simple page sequence formatting object}{fig.simple-page-sequence-fo}
@img{models/simple-page-sequence.svg}
@end figure

tbd.
@end def


@def{Formatting Object}{scroll-sequence}
A scroll sequence provides a simple document master for “endless” media, where
content is not presented in separated pages, but in a scrolling fashon
(e.g. websites).

@figure{Scroll sequence formatting object}{fig.scroll-sequence-fo}
@img{models/scroll-sequence.svg}
@end figure

tbd.

Defined characteristics:

@definitions
@item{@vidx{@var{title:}}{sym}} specifies the title of the entire scroll
  sequence; the backend processor might use it for the displaying app's header.
@item{@vidx{@var{metadata.author:}}{sym}} set's the author metadata field of
  the resulting output.  Depends on the backend processor.
@item{@vidx{@var{metadata.desc:}}{sym}} set's the description metadata field
  of the resulting output.  Depends on the backend processor.
@end definitions
@end def


@def{Formatting Object}{screen-set}{screen-set}{fo.screen-set}

A screen set provides the document master for more elaborate presentation of
content on a principially non-paged media (like websites).  It supports the
definition and positioning of multiple areas which allows to render a document
with sidebar navigations, top or footer areas and other features typical for
modern websites.

The areas are defined by the stylesheet using a @ty{screen-set-model}.

A screen set is not usefull for paged media and thus likely not supported by
backend processors dealing with such.  Also backend processor might only support
a limited set of zones defined by regions in the screen set model.

Defined characteristics:

@definitions
@item{@vidx{@var{title:}}{sym}} specifies the title of the entire screen set;
  the backend processor might use it for the displaying app's header.
@item{@vidx{@var{metadata.author:}}{sym}} set's the author metadata field of
  the resulting output.  Depends on the backend processor.
@item{@vidx{@var{metadata.desc:}}{sym}} set's the description metadata field
  of the resulting output.  Depends on the backend processor.
@item{@vidx{@var{screen-set-model:}}{sym}} specifies the model to use for this
  @ty{screen-set}.  The value must be of type @ty{screen-set-model}.
@item{@vidx{@var{html.add-css-link:}}{sym}} takes a string which is included
  as a @tag{link}{no} tag into the generated @acr{HTML}.  This can be used to
  include @acr{CSS} or javascript sources.  By default unset.
@end definitions
@end def

@deffn{(make-screen-set-model @prm{regions*})}{make-screen-set-model}
Creates a screen set model with @prm{regions} which can be used with top
structuring formatting objects like @ty{screen-class}.
@end deffn

@deffn{(region @prm{keyword-argument*})}{region}

Defines a region in a screen set model.  Each region has a @dfn{zone} identifier
and defines a @dfn{port}.  All regions with the same zone identifier are
rendered into the same zone defined by the backend processor.  Depending on the
kind of the region (fixed or floating), only single region definitions might be
useful in a given zone.

Sosofo specifications are bound with the @keyw{label:} property to ports defined
in these regions.

Defined characteristics:

@definitions
@item{@vidx{@var{port:}}{sym}} gives an identifier which names the port sosofos
  are bound to with the @keyw{label:} property.
@item{@vidx{@var{zone:}}{sym}} binds the region to one of the zones defined by
  the backend processor.  See the documentation for the backend processor which
  zones are available.
@item{@vidx{@var{fixed?:}}{sym}} if @val{#t} specifies that the region is
  positioned on a fixed point.  Defaults to @val{#f}, which speicifies that the
  region is a floating region.
@item{@vidx{@var{height:}}{sym}} defines the height of the region; ignored if
  the @keyw{fixed?:} property is @val{#f}.  Defaults to @val{auto} and unlimited
  resizing.
@item{@vidx{@var{width:}}{sym}} defines the width of the region.  Defaults to @val{auto}
  and unlimited resizing.
@item{@vidx{@var{x-origin:}}{sym}} defines the x position of the region on the
  screen.
@item{@vidx{@var{y-origin:}}{sym}} defines the y position of the region on the
  screen.
@item{@vidx{@var{background-color:}}{sym}} Specifies the background color of
  the text to use.  If @val{#f} the default @code{(inherited)} value is used.
@item{@vidx{@var{span-screen-height?:}}{sym}}
@item{@vidx{@var{start-margin:}}{sym}}
@item{@vidx{@var{end-margin:}}{sym}}
@item{@vidx{@var{font-size:}}{sym}} see @ref{sect.common-props}
@item{@vidx{@var{font-caps:}}{sym}} see @ref{sect.common-props}
@item{@vidx{@var{position-point-shift:}}{sym}} see @ref{sect.common-props}
@item{@vidx{@var{font-name:}}{sym}} see @ref{sect.common-props}
@item{@vidx{@var{font-posture:}}{sym}} see @ref{sect.common-props}
@item{@vidx{@var{font-weight:}}{sym}} see @ref{sect.common-props}
@item{@vidx{@var{line-spacing:}}{sym}} see @ref{sect.common-props}
@end definitions

@end deffn


@end subsection


@subsection{Display Formatting Objects}

Display formatting objects organize their content along the display axis,
i.e. in western textual layout the vertical direction.  Some of them support
being used as an inline formating object, too; the behaviour is controlled by
setting the @var{display?:} keyword.

@def{Formatting Object}{paragraph}

A @ty{paragraph} represents a display formatting object with one
principial port (@val{“text”}).  It takes any number of inline formatting
objects and organizes them into a line by line flow.  Typical geometrical layout
are left and right margins, space before and after and font and size
specifications.  The first and last line of a paragraph can be specially layed
out using the @var{first-line-start-indent} and @var{last-line-end-indent}
characteristics.

@figure{Paragraph formatting object}{fig.paragraph-fo}
@img{models/paragraph.svg}
@end figure

Defined characteristics:

@definitions
@item{@vidx{@var{first-line-start-indent:}}{sym}} is a length-spec giving an
  indent for the first line.  This is added to the general indent
  @var{start-indent} and can be negative.  The default value is @val{0pt}.
@item{@vidx{@var{last-line-end-indent:}}{sym}} is a length-spec giving an indent
  for the last line.  This is added to the @var{end-indent} and can be
  negative.  The default value is the inline-space equivalent to
  @code{(inline-space 1em min: 1em max: 'inf)}.
@item{@vidx{@var{line-spacing:}}{sym}} see @ref{sect.common-props}
@item{@vidx{@var{font-caps:}}{sym}} see @ref{sect.common-props}
@item{@vidx{@var{font-name:}}{sym}} see @ref{sect.common-props}
@item{@vidx{@var{font-posture:}}{sym}} see @ref{sect.common-props}
@item{@vidx{@var{font-size:}}{sym}} see @ref{sect.common-props}
@item{@vidx{@var{font-weight:}}{sym}} see @ref{sect.common-props}
@item{@vidx{@var{language:}}{sym}} @c ""),
@item{@vidx{@var{start-indent:}}{sym}} is a length-spec specifying the left
  indent of the text.  Default is @val{0em}.
@item{@vidx{@var{end-indent:}}{sym}} is a length-spec specifying the right
  indent of the text.  Default is @val{0em}.
@item{@vidx{@var{quadding:}}{sym}} is a symbol specifying the text layout
  in line.  If @val{left} the text is left aligned (ragged-right aligned),
  if @val{right} it is right aligned (ragged-left), if @val{center} the
  text lines are centered, and if @val{justify} the text lines are justified.
  Default is @val{justify}.
@item{@vidx{@var{space-before:}}{sym}} is a length-spec specifying the
  leading distance between the paragraphs text body top and the previous
  formatting object.  If @val{#f} defaults to @code{(display-space 0pt)}.
@item{@vidx{@var{space-after:}}{sym}} is a length-spec specifying the trailing
  distance between the paragraphs text body bottom and the following formatting
  object.  If @val{#f} defaults to @code{(display-space 0pt)}.
@item{@vidx{@var{keep-with-previous?:}}{sym}} if @val{#t} indicates that a page
  break before this formatting object is not allowed.  Defaults to @val{#f}.
@item{@vidx{@var{keep-with-next?:}}{sym}} if @val{#t} indicates that a page
  break after this formatting object is not allowed.  Defaults to @val{#f}.
@item{@vidx{@var{break-after:}}{sym}} is one of the symbols @val{page} or
  @val{column} this specifies that the formating object should end an area of
  that type.  This characteristics is not inherited and defaults to @val{#f}.
@item{@vidx{@var{break-before:}}{sym}} is one of the symbols @val{page} or
  @val{column} this specifies that the formating object should break at a page
  or column and start at the beginning of that area.  This characteristics is
  not inherited and defaults to @val{#t}.
@item{@vidx{@var{lines:}}{sym}} Default is @val{wrap}.
@item{@vidx{@var{whitespace-treatment:}}{sym}} Default is @val{collapse}.
@item{@vidx{@var{asis-wrap-indent:}}{sym}} @c 10),
@item{@vidx{@var{numbered-lines?:}}{sym}} @c false),
@item{@vidx{@var{line-number-side:}}{sym}} @c "start"),
@item{@vidx{@var{position-point-shift:}}{sym}} @c LengthSpec(kDimen, 0, k_pt)),
@item{@vidx{@var{color:}}{sym}} Specifies the foreground color of the text to
  use.  If @val{#f} the default @code{(inherited)} value is used.
@item{@vidx{@var{background-color:}}{sym}} Specifies the background color of
  the text to use.  If @val{#f} the default @code{(inherited)} value is used.
@end definitions

@end def


@def{Formatting Object}{display-group}

@figure{Display group formatting object}{fig.display-group-fo}
@img{models/display-group.svg}
@end figure

tbd.
@end def


@def{Formatting Object}{box}

This flow object has a single port and can be rendered either as a display or as
an inline flow object, depending on the @var{display?} characteristic.
Processors should render this flow object as a box around its content, either
with a border (@var{box-type} is @val{border}) or with a filled background color
(@var{box-type} is @val{background}).

@figure{Box formatting object}{fig.box-fo}
@img{models/box.svg}
@end figure

Defined characteristics:

@definitions
@item{@vidx{@var{box-type}}{sym}} is a symbol specifying whether the box is
  rendered with border or background.  Possible values are @val{border},
  @val{background}, and @val{both}.  The default is @val{border}.
@item{@vidx{@var{display?}}{sym}} when @val{#t} indicates whether this box is
  a display object; default is @val{#f}
@item{@vidx{@var{box-corner-rounded?:}}{sym}} when @val{#t} the box is
  rendered with rounded corners.  The radius of the corners is specified with
  the @var{box-corner-radius} characteristic.  Default is @val{#f}.
@item{@vidx{@var{box-corner-radius:}}{sym}} Default is @val{3pt}.
@item{@vidx{@var{background-color:}}{sym}} the color used for rendering the
  background.  By default unset.
@item{@vidx{@var{color:}}{sym}} the color used for rendering a border.  By
  default unset.
@item{@vidx{@var{line-thickness:}}{sym}} specifies the thickness of the border
  line.  Default is @val{1pt}.
@item{@vidx{@var{space-before:}}{sym}} specifies how much space along the
  display axis should be inserted before this formatting object.  Defaults to
  @val{0pt}.
@item{@vidx{@var{space-after:}}{sym}} specifies how much space along the display
  axis should be inserted after this formatting object.  Defaults to @val{0pt}.
@item{@vidx{@var{break-before:}}{sym}} is one of the symbols @val{page} or
  @val{column} this specifies that the formating object should break at a page
  or column and start at the beginning of that area.  This characteristics is
  not inherited and defaults to @val{#t}.
@item{@vidx{@var{break-after:}}{sym}} is one of the symbols @val{page} or
  @val{column} this specifies that the formating object should end an area
  of that type.  This characteristics is not inherited and defaults to @val{#f}.
@end definitions
@end def


@def{Formatting Object}{simple-column-set-sequence}

This formatting object supports to layout the principal content flow into
multiple organized columns along the display axis.  It has a single port and
accepts display formatting objects only.  It can't be nested.

The width of the containing display area is split into equally sized areas with
a @dfn{gutter} between them.  The main content flow is along these areas
starting from the left to the right.  If the content doesn't fit into all areas
on a single page the column set sequence restarts on the next page.  The colums
are levelled on the last page.

@figure{Simple column set sequence formatting object}{fig.simple-column-set-sequence-fo}
@img{models/simple-column-set-sequence.svg}
@end figure

Defined characteristics:

@definitions
@item{@vidx{@var{space-before:}}{sym}} specifies how much space along the display
  axis should be inserted before this formatting object.  Defaults to @val{0pt}.
@item{@vidx{@var{space-after:}}{sym}} specifies how much space along the display
  axis should be inserted after this formatting object.  Defaults to @val{0pt}.
@item{@vidx{@var{keep-with-previous?:}}{sym}} if @val{#t} indicates that a page
  break before this formatting object is not allowed.  Defaults to @val{#f}.
@item{@vidx{@var{keep-with-next?:}}{sym}} if @val{#t} indicates that a page break
  after this formatting object is not allowed.  Defaults to @val{#f}.
@item{@vidx{@var{break-after:}}{sym}} is one of the symbols @val{page} or @val{column}
  this specifies that the formating object should end an area of that type.
  This characteristics is not inherited and defaults to @val{#f}.
@item{@vidx{@var{break-before:}}{sym}} is one of the symbols @val{page} or
  @val{column} this specifies that the formating object should break at a page or
  column and start at the beginning of that area.  This characteristics is not
  inherited and defaults to @val{#t}.
@item{@vidx{@var{column-number:}}{sym}} Gives the number of column areas.
@item{@vidx{@var{gutter-width:}}{sym}} specifies the width of the gutter between
  the column areas.  Defaults to @val{21pt}.
@end definitions

@end def

@end subsection


@subsection{Inline formatting objects}
@def{Formatting Object}{sequence}
tbd.
@end def


@def{Formatting Object}{line-field}
tbd.
@end def


@def{Formatting Object}{score}
tbd.
@end def


@def{Formatting Object}{literal}
tbd.
@end def

@def{Formatting Object}{page-number}
tbd.
@end def


@def{Formatting Object}{link}{link}

A link flow object represents a link to either an internal or external resource.
In interactive context it can be interactively traversed, e.g. by clicking on
its rendered areas.  It has a single port, which can take both inlined and
displayed flow objects.  If nested the innermost link is effective.

@definitions
@item{@vidx{@var{destination:}}{sym}} is either @val{#f} or an object of type
  @ty{address} or a list of one or more objects of type address.  This
  characteristic is required and not inherited.
@end definitions
@end def


@def{Formatting Object}{anchor}
tbd.
@end def


@def{Formatting Object}{pagebreak}
tbd.
@end def


@def{Formatting Object}{footnote}
tbd.
@end def

@end subsection

@end section
